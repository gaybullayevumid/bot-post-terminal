from typing import List, Dict, Any, Optional
from loguru import logger
from tgbot.services.base_service import BaseService
from tgbot.models.models import TGUser


class UserService(BaseService):
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    async def get_user_by_telegram_id(self, telegram_id: int) -> Optional[TGUser]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID.
        
        SQL:
        SELECT *
        FROM telegram_users
        WHERE telegram_id = :telegram_id;
        """
        return await self.safe_execute(
            "get_user_by_telegram_id",
            TGUser.get_user,
            self.db,
            telegram_id
        )
    
    async def update_user_phone(self, telegram_id: int, phone: str) -> Optional[TGUser]:
        """
        –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID.
        
        SQL:
        UPDATE telegram_users
        SET phone = :phone
        WHERE telegram_id = :telegram_id;
        """
        return await self.safe_execute(
            "update_user_phone",
            TGUser.update_user,
            self.db,
            telegram_id,
            phone=phone
        )
    
    async def get_user_invoice(self, phone: str, month: str) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –º–µ—Å—è—Ü—É.
        
        SQL:
        SELECT
            o.obj_name         AS "–ú–∞–≥–∞–∑–∏–Ω/–°–∫–ª–∞–¥",
            g.gd_code          AS "–ö–æ–¥",
            g.gd_name          AS "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞",
            s.sls_datetime     AS "–î–∞—Ç–∞/–í—Ä–µ–º—è",
            '–ü—Ä–æ–¥–∞–∂–∞'          AS "–¢–∏–ø",
            op.opr_quantity    AS "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
            a.oap_price1       AS "–¶–µ–Ω–∞",
            (op.opr_quantity * a.oap_price1) AS "–°—É–º–º–∞",
            dss.sords_name     AS "–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã"
        FROM doc_sales s
            JOIN operations op ON op.opr_document = s.sls_id AND op.opr_type = 2
            JOIN operations_additional_prop a ON a.oap_operation = op.opr_id
            JOIN dir_goods g ON g.gd_id = op.opr_good
            JOIN dir_objects o ON o.obj_id = s.sls_object
            JOIN dir_customers c ON c.cstm_id = s.sls_customer
            JOIN dir_sales_status dss ON dss.sords_id = s.sls_status
        WHERE
            s.sls_datetime BETWEEN '2015-01-01' AND '2044-06-15'
            AND s.sls_performed = 1
            AND s.sls_deleted = 0
            AND :phone IN (c.cstm_phone, c.cstm_phone2, c.cstm_phone3, c.cstm_phone4)
            AND dss.sords_name != '–ó–∞–≤–µ—Ä—à–µ–Ω'
            AND EXTRACT(MONTH FROM s.sls_datetime) = :month
        ORDER BY s.sls_datetime DESC;
        """
        return await TGUser.get_user_invoice(self.db, phone, month)
    
    async def get_user_reconciliation(self, phone: str, year: int, month: int) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –≥–æ–¥—É –∏ –º–µ—Å—è—Ü—É.
        
        SQL:
        SELECT
            s.sls_datetime AS "–î–∞—Ç–∞",
            '–†–µ–∞–ª–∏–∑–∞—Ü–∏—è ‚Ññ' || s.sls_id AS "–î–æ–∫—É–º–µ–Ω—Ç",
            SUM(op.opr_quantity * a.oap_price1) AS "–°—É–º–º–∞",
            SUM(CASE WHEN dco.cop_type IN (1,4) THEN dco.cop_value ELSE 0 END) AS "–û–ø–ª–∞—á–µ–Ω–æ",
            (SUM(op.opr_quantity * a.oap_price1) - SUM(CASE WHEN dco.cop_type IN (1,4) THEN dco.cop_value ELSE 0 END)) AS "–î–æ–ª–≥",
            s.sls_note AS "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ"
        FROM doc_sales s
            LEFT JOIN operations op ON op.opr_document = s.sls_id AND op.opr_type = 2
            LEFT JOIN operations_additional_prop a ON a.oap_operation = op.opr_id
            LEFT JOIN doc_cash_operations dco ON dco.cop_payment = s.sls_id
            JOIN dir_customers c ON s.sls_customer = c.cstm_id
        WHERE
            (c.cstm_phone = :phone OR c.cstm_phone2 = :phone OR c.cstm_phone3 = :phone OR c.cstm_phone4 = :phone)
            AND s.sls_performed = 1
            AND s.sls_deleted = 0
            AND EXTRACT(YEAR FROM s.sls_datetime) = :year
            AND EXTRACT(MONTH FROM s.sls_datetime) = :month
        GROUP BY s.sls_id, s.sls_datetime, s.sls_note
        ORDER BY s.sls_datetime DESC, s.sls_id DESC;
        """
        return await TGUser.get_customer_sales_summary(self.db, phone, year, month)
    
    async def get_customer_name(self, phone: str) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
        
        SQL:
        SELECT
            c.cstm_name AS name
        FROM dir_customers c
        WHERE
            c.cstm_phone = :phone
            OR c.cstm_phone2 = :phone
            OR c.cstm_phone3 = :phone
            OR c.cstm_phone4 = :phone
        LIMIT 1;
        """
        return await TGUser.get_customer_name_by_phone(self.db, phone)
    
    def format_reconciliation_summary(self, summary: List[Dict[str, Any]], phone: str, year: int, month: int) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        summary: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∫–ª—é—á–∞–º–∏ '–°—É–º–º–∞', '–î–æ–ª–≥', '–î–æ–∫—É–º–µ–Ω—Ç', ...
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram.
        """
        if not summary:
            return f"‚ùå –ó–∞ {month}/{year} –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        total_debt = sum(float(row.get('–î–æ–ª–≥', 0) or 0) for row in summary)
        total_sum = sum(float(row.get('–°—É–º–º–∞', 0) or 0) for row in summary)
        
        return (
            f"üìÑ <b>–ê–∫—Ç —Å–≤–µ—Ä–∫–∏ –∑–∞ {month}/{year}</b>\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <b>{phone}</b>\n\n"
            f"üìä –ù–∞–π–¥–µ–Ω–æ: {len(summary)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
            f"üíµ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: <b>{self.format_currency(total_sum)}</b>\n"
            f"üí∞ –ò—Ç–æ–≥–æ–≤—ã–π –¥–æ–ª–≥: <b>{self.format_currency(total_debt)}</b>\n\n"
            "üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª..."
        )
    
    def get_reconciliation_excel_params(self, customer_name: str, year: int, month: int, total_debt: float) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Excel-—Ñ–∞–π–ª–∞ –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel:
        - company1: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
        - company2: –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
        - period_start: –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
        - period_end: –¥–∞—Ç–∞ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞
        - saldo_start: –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        - saldo_end: –∫–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å
        """
        return {
            "company1": "AVTOLIDER",
            "company2": customer_name,
            "period_start": f"01.{month}.{year}",
            "period_end": f"31.{month}.{year}",
            "saldo_start": 0.0,
            "saldo_end": total_debt
        }
    
    async def get_user_reconciliation_act_rows(self, phone: str, year: int, month: int):
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Excel.
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç TGUser.get_filtered_sales_summary, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç:
        
        SQL:
        SELECT
            s.sls_datetime AS "–î–∞—Ç–∞",
            '–†–µ–∞–ª–∏–∑–∞—Ü–∏—è ‚Ññ' || s.sls_id AS "–î–æ–∫—É–º–µ–Ω—Ç",
            SUM(op.opr_quantity * a.oap_price1) AS "–°—É–º–º–∞",
            SUM(CASE WHEN dco.cop_type IN (1,4) THEN dco.cop_value ELSE 0 END) AS "–û–ø–ª–∞—á–µ–Ω–æ",
            (SUM(op.opr_quantity * a.oap_price1) - SUM(CASE WHEN dco.cop_type IN (1,4) THEN dco.cop_value ELSE 0 END)) AS "–î–æ–ª–≥"
        FROM doc_sales s
            LEFT JOIN operations op ON op.opr_document = s.sls_id AND op.opr_type = 2
            LEFT JOIN operations_additional_prop a ON a.oap_operation = op.opr_id
            LEFT JOIN doc_cash_operations dco ON dco.cop_payment = s.sls_id
            [JOIN dir_customers c ON s.sls_customer = c.cstm_id]
        WHERE
            YEAR(s.sls_datetime) = :year
            AND MONTH(s.sls_datetime) = :month
            AND s.sls_performed = 1
            AND s.sls_deleted = 0
            [AND c.cstm_id = :customer_id]
            [AND (c.cstm_phone = :phone OR ...)]
        GROUP BY s.sls_id, s.sls_datetime
        ORDER BY s.sls_datetime DESC, s.sls_id DESC;
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è Excel-—Ç–∞–±–ª–∏—Ü—ã.
        """
        try:
            rows = await TGUser.get_filtered_sales_summary(self.db, year, month, phone_number=phone)
            result = []
            for row in rows:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–º–µ—á–∞–Ω–∏—é –∏–ª–∏ —Å—É–º–º–∞–º
                note = row.get('–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ', '') or ''
                doc = row.get('–î–æ–∫—É–º–µ–Ω—Ç', '')
                summa = float(row.get('–°—É–º–º–∞', 0) or 0)
                paid = float(row.get('–û–ø–ª–∞—á–µ–Ω–æ', 0) or 0)
                debt = float(row.get('–î–æ–ª–≥', 0) or 0)
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ 0
                r = {
                    '–î–∞—Ç–∞': row.get('–î–∞—Ç–∞'),
                    '–î–æ–∫—É–º–µ–Ω—Ç': note if note else doc,
                    '–î–µ–±–µ—Ç1': 0.0,
                    '–î–æ–ª–≥1': 0.0,
                    '–î–æ–ª–≥2': 0.0,
                    '–î–µ–±–µ—Ç2': 0.0,
                    '–ö—Ä–µ–¥–∏—Ç': 0.0,
                    '–ö—Ä–µ–¥–∏—Ç2': 0.0
                }
                # –õ–æ–≥–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º (–ø—Ä–∏–º–µ—Ä–Ω–∞—è)
                if '–æ—Ç–≥—Ä—É–∑–∫–∞' in note.lower() or '—Ä–µ–∞–ª–∏–∑–∞—Ü' in doc.lower():
                    # –ü—Ä–æ–¥–∞–∂–∞/–æ—Ç–≥—Ä—É–∑–∫–∞
                    r['–î–µ–±–µ—Ç1'] = summa
                    r['–ö—Ä–µ–¥–∏—Ç'] = summa
                elif '–æ–ø–ª–∞—Ç–∞' in note.lower():
                    # –û–ø–ª–∞—Ç–∞
                    r['–î–æ–ª–≥1'] = paid
                    r['–î–µ–±–µ—Ç2'] = paid
                elif '–≤–æ–∑–≤—Ä–∞—Ç' in note.lower():
                    # –í–æ–∑–≤—Ä–∞—Ç
                    r['–î–æ–ª–≥2'] = paid
                else:
                    # –ï—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ —Å—É–º–º–∞ –≤ –¥–µ–±–µ—Ç
                    r['–î–µ–±–µ—Ç1'] = summa
                result.append(r)
            logger.info(f"UserService.get_user_reconciliation_act_rows: phone={phone}, year={year}, month={month}, rows={len(result)}")
            return result
        except Exception as e:
            logger.error(f"UserService.get_user_reconciliation_act_rows error: {e}")
            raise 